The Data AcQuisition library (DAQ), provides pluggable packet I/O.  LibDAQ
replaces direct calls to libraries like libpcap with an abstraction layer
that facilitates operation on a variety of hardware and software interfaces
without requiring changes to Snort.  It is possible to select the DAQ module
and mode when invoking Snort to perform pcap readback or inline operation,
etc.  The DAQ library may be useful for other packet processing
applications and the modular nature allows you to build new modules for
other platforms.

The DAQ library is provided as a separate package on the official Snort
download site (https://snort.org/downloads) and contains a number of DAQ
modules including PCAP, AFPacket, NFQ, IPFQ, Netmap, and Dump implementations.
Snort 3 itself contains a few new DAQ modules mostly used for testing as
described below.  Additionally, DAQ modules developed by third parties to
facilitate the usage of their own hardware and software platforms exist.


=== Building the DAQ Library and Its Bundled DAQ Modules

Refer to the README in the LibDAQ source tarball for instructions on how to
build the library and modules as well as details on configuring and using the
bundled DAQ modules.

A copy of the README from LibDAQ has been included in the Reference section of
this manual for convenience.  For the most up-to-date information, please refer
to the version that came with your installation's source code.


=== Configuration

As with a number of features in Snort 3, the LibDAQ and DAQ module
configuration may be controlled using either the command line options or direct
Snort module configuration.

DAQ modules may be statically built into Snort, but the more common case is to
use DAQ modules that have been built as dynamically loadable objects.  Because
of this, the first thing to take care of is informing Snort of any locations it
should search for dynamic DAQ modules.  From the command line, this can be done
with one or more invocations of the --daq-dir option, which takes a path to
search as its argument.  All arguments will be collected into a list of
locations to be searched. In the Lua configuration, the 'module_dirs' property
of the 'daq' Snort module is a list of paths for the same purpose.

Next, one must select which DAQ module they wish to use by name.  This is done
using the --daq option from the command line or the 'module' property of the
'daq' Snort module.  To get a list of the available modules, run Snort with the
--daq-list option making sure to specify any DAQ module search directories
beforehand.  If no DAQ module is specified, Snort will default to attempting to
find and use the 'pcap' DAQ module.

Some DAQ modules can be further directly configured using DAQ module variables.
All DAQ module variables come in the form of either just a key or a key and a
value separated by an equals sign.  For example, 'debug' or 'fanout_type=hash'.
The command line option for specifying these is --daq-var and the configuration
file equivalent is the 'variables' property of the 'daq' Snort module.

The LibDAQ concept of operational mode (passive, inline, or file readback) is
not directly configurable but instead inferred from other Snort configuration.
The DAQ module acquisition timeout is always configured to 1 second and the
packet capture length (snaplen) is configured by the -s command line option and
defaults to 1514 bytes.

Finally, and most importantly, is the input specification for the DAQ module.
In readback mode, this is simply the file to be read back and analyzed.  For
live traffic processing, this is the name of the interface or other necessary
input specification as required by the DAQ module to understand what to operate
upon.  From the command line, the -r option is used to specify a file to be
read back and the -i option is used to indicate a live interface input
specification.  Both are covered by the 'input_spec' property of the 'daq'
Snort module.

==== Command Line Example

    snort --daq-dir /usr/local/lib/daq --daq-dir /opt/lib/daq --daq afpacket
--daq-var debug --daq-var fanout_type=hash -i eth1:eth2

==== Configuration File Example

The following is the equivalent of the above command line DAQ configuration in
Lua form:

    daq =
    {
        module_dirs =
        {
            '/usr/local/lib/daq',
            '/opt/lib/daq'
        },
        module = 'afpacket',
        input_spec = 'eth1:eth2',
        variables =
        {
            'debug',
            'fanout_type=hash'
        }
    }

==== Interaction With Multiple Packet Threads

DAQ configuration can become much more complicated as additional packet threads
are introduced.  To allow for more flexibility in configuring DAQ module
instances, each packet thread can be configured with its own input
specification and/or DAQ module variables, which creates two classes of each:
instance-specific and global.  Global DAQ module variables are those defined
before any -i option on the command line or in the top-level 'variables'
property demonstrated in the previous section.  The global input specification
is defined by either the first -i option on the command line (which doubles as
the input specification for instance 0) or the top-level 'input_spec' in the
i'daq' Snort module.  Instance-specific input specifiers are configured on the
command line by giving multiple -i options.  In the same way, instance-specific 
DAQ module variables on the command line are declared normally but follow and
apply only to the instance operating on the last -i option.  When configuring
through Lua, the 'instances' property of the 'daq' Snort module is a list of
tables, each defining instance-specific configuration for a given instance ID.

Each packet thread will create an instance of the chosen DAQ
module using the global interface specification and global set of DAQ module
variables *unless* they were overridden with instance-specific values.  When
DAQ module instances are configured, any global DAQ modules will be set and
then any instance-specific DAQ variables.  This means that an instance will
"inherit" the global DAQ modules and can override those by specifying them
again with different values or add to them by specifying new variables
entirely.

Here is the configuration for a hypothetical AFPacket DAQ module that has been
modified to loadbalance based on DAQ variables (lb_total is the total number of
instances to loadbalance across and is set globally, and lb_id is the
instance's loadbalancing ID within that total and is set per-instance) across 4
packet processing threads within Snort:

    daq =
    {
        module_dirs =
        {
            '/usr/local/sf/lib/daq'
        },
        module = 'afpacket',
        input_spec = 'eth1',
        variables =
        {
            'lb_total=4'
        },
        instances =
        {
            {
                id = 0,
                variables =
                {
                    'lb_id=1',
                }
            },
            {
                id = 1,
                variables =
                {
                    'lb_id=2',
                }
            },
            {
                id = 2,
                variables =
                {
                    'lb_id=3',
                }
            },
            {
                id = 3,
                variables =
                {
                    'lb_id=4',
                }
            },
        }
    }

The equivalent command line invocation would look like this (made uglier by the
lack of needing a different input specification for each thread):

    snort --daq-dir /usr/local/sf/lib/daq --daq afpacket --daq-var lb_total=4 -i
eth1 --daq-var lb_id=1 -i eth1 --daq-var lb_id=2 -i eth1 --daq-var lb_id=3 -i
eth1 --daq-var lb_id=4 -z 4

For any particularly complicated setup, it is recommended that one configure
via a Lua configuration file rather than using the command line options.


=== DAQ Modules Included With Snort 3

==== Socket Module

The socket module provides provides a stream socket server that will accept
up to 2 simultaneous connections and bridge them together while also
passing data to Snort for inspection.  The first connection accepted is
considered the client and the second connection accepted is considered the
server.  If there is only one connection, stream data can't be forwarded
but it is still inspected.

Each read from a socket of up to snaplen bytes is passed as a packet to
Snort along with a DAQ_SktHdr_t pointer in DAQ_PktHdr_t->priv_ptr.
DAQ_SktHdr_t conveys IP4 address, ports, protocol, and direction.  Socket
packets can be configured to be TCP or UDP.  The socket DAQ can be operated
in inline mode and is able to block packets.

The socket DAQ uses DLT_SOCKET and requires that Snort load the socket
codec which is included in the extra package.

To use the socket DAQ, start Snort like this:

    ./snort --plugin-path /path/to/lib/snort_extra \
        --daq socket [--daq-var port=<port>] [--daq-var proto=<proto>] [-Q]

    <port> ::= 1..65535; default is 8000
    <proto> ::= tcp | udp

* This module only supports ip4 traffic.

* This module is only supported by Snort 3.  It is not compatible with
  Snort 2.

* This module is primarily for development and test.


==== File Module

The file module provides the ability to process files directly w/o having
to extract them from pcaps.  Use the file module with Snort's stream_file
to get file type identification and signature services.  The usual IPS
detection and logging etc. is available too.

You can process all the files in a directory recursively using 8 threads
with these Snort options:

    --pcap-dir path -z 8

* This module is only supported by Snort 3.  It is not compatible with
  Snort 2.

* This module is primarily for development and test.


==== Hext Module

The hext module generates packets suitable for processing by Snort from
hex/plain text.  Raw packets include full headers and are processed
normally.  Otherwise the packets contain only payload and are accompanied
with flow information (4-tuple) suitable for processing by stream_user.

The first character of the line determines it's purpose:

    '$' command
    '#' comment
    '"' quoted string packet data
    'x' hex packet data
    ' ' empty line separates packets

The available commands are:

    $client <ip4> <port>
    $server <ip4> <port>

    $packet -> client
    $packet -> server

    $packet <addr> <port> -> <addr> <port>

    $sof <i32:ingressZone> <i32:egressZone> <i32:ingressIntf> <i32:egressIntf> <s:srcIp> <i16:srcPort> <s:destIp> <i16:dstPort> <u32:opaque> <u64:initiatorPkts> <u64:responderPkts> <u64:initiatorPktsDropped> <u64:responderPktsDropped> <u64:initiatorBytesDropped> <u64:responderBytesDropped> <u8:isQosAppliedOnSrcIntf> <timeval:sof_timestamp> <timeval:eof_timestamp> <u16:vlan> <u16:address_space_id> <u8:protocol> 
    $eof <i32:ingressZone> <i32:egressZone> <i32:ingressIntf> <i32:egressIntf> <s:srcIp> <i16:srcPort> <s:destIp> <i16:dstPort> <u32:opaque> <u64:initiatorPkts> <u64:responderPkts> <u64:initiatorPktsDropped> <u64:responderPktsDropped> <u64:initiatorBytesDropped> <u64:responderBytesDropped> <u8:isQosAppliedOnSrcIntf> <timeval:sof_timestamp> <timeval:eof_timestamp> <u16:vlan> <u16:address_space_id> <u8:protocol> 

Client and server are determined as follows.  $packet -> client indicates
to the client (from server) and $packet -> server indicates a packet to the
server (from client).  $packet followed by a 4-tuple uses the heuristic
that the client is the side with the greater port number.

The default client and server are 192.168.1.1 12345 and 10.1.2.3 80
respectively.  $packet commands with a 4-tuple do not change client and
server set with the other $packet commands.

$packet commands should be followed by packet data, which may contain any
combination of hex and strings.  Data for a packet ends with the next
command or a blank line.  Data after a blank line will start another packet
with the same tuple as the prior one.

$sof and $eof commands generate Start of Flow and End of Flow metapackets
respectively. They are followed by a definition of a Flow_Stats_t data structure
which will be fed into Snort via the metadata callback. 

Strings may contain the following escape sequences:

    \r = 0x0D = carriage return
    \n = 0x0A = new line
    \t = 0x09 = tab
    \\ = 0x5C = \

Format your input carefully; there is minimal error checking and little
tolerance for arbitrary whitespace.  You can use Snort's -L hext option to
generate hext input from a pcap.

* This module only supports ip4 traffic.

* This module is only supported by Snort 3.  It is not compatible with
  Snort 2.

* This module is primarily for development and test.

The hext DAQ also supports a raw mode which is activated by setting the
data link type.  For example, you can input full ethernet packets with
--daq-var dlt=1 (Data link types are defined in the DAQ include
sfbpf_dlt.h.)  Combine that with the hext logger in raw mode for a quick
(and dirty) way to edit pcaps.  With --lua "log_hext = { raw = true }", the
hext logger will dump the full packet in a way that can be read by the hext
DAQ in raw mode.  Here is an example:

    # 3 [96]

    x02 09 08 07 06 05 02 01 02 03 04 05 08 00 45 00 00 52 00 03  # ..............E..R..
    x00 00 40 06 5C 90 0A 01 02 03 0A 09 08 07 BD EC 00 50 00 00  # ..@.\............P..
    x00 02 00 00 00 02 50 10 20 00 8A E1 00 00 47 45 54 20 2F 74  # ......P.  .....GET /t
    x72 69 67 67 65 72 2F 31 20 48 54 54 50 2F 31 2E 31 0D 0A 48  # rigger/1 HTTP/1.1..H
    x6F 73 74 3A 20 6C 6F 63 61 6C 68 6F 73 74 0D 0A              # ost: localhost..

A comment indicating packet number and size precedes each packet dump.
Note that the commands are not applicable in raw mode and have no effect.

